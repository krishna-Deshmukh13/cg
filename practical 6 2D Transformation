#include <GL/glut.h>
#include <cmath>
#include <iostream>

// Original triangle vertices
float triangle[3][2] = {
    {100, 100},
    {200, 100},
    {150, 200}
};

int choice = 0;  // User-selected operation: 1-scale, 2-rotate, 3-reflect, 4-translate

void drawTriangle(float t[3][2]) {
    glBegin(GL_TRIANGLES);
    for (int i = 0; i < 3; i++)
        glVertex2f(t[i][0], t[i][1]);
    glEnd();
}

// Transformation functions
void scale(float t[3][2], float sx, float sy) {
    for (int i = 0; i < 3; i++) {
        t[i][0] *= sx;
        t[i][1] *= sy;
    }
}

void rotate(float t[3][2], float angle) {
    float rad = angle * 3.14159 / 180;
    for (int i = 0; i < 3; i++) {
        float x = t[i][0], y = t[i][1];
        t[i][0] = x * cos(rad) - y * sin(rad);
        t[i][1] = x * sin(rad) + y * cos(rad);
    }
}

void reflectX(float t[3][2]) {
    for (int i = 0; i < 3; i++)
        t[i][1] = -t[i][1];
}

// ? New: Translate the triangle
void translate(float t[3][2], float tx, float ty) {
    for (int i = 0; i < 3; i++) {
        t[i][0] += tx;
        t[i][1] += ty;
    }
}

void display() {
    glClear(GL_COLOR_BUFFER_BIT);

    // Draw original triangle in RED
    glColor3f(1, 0, 0);
    drawTriangle(triangle);

    // Copy original triangle
    float transformed[3][2];
    memcpy(transformed, triangle, sizeof(triangle));

    // Apply selected transformation
    if (choice == 1) {
        scale(transformed, 1.5, 1.5);
        glColor3f(0, 1, 0);  // Green
    } else if (choice == 2) {
        rotate(transformed, 45);
        glColor3f(0, 0, 1);  // Blue
    } else if (choice == 3) {
        reflectX(transformed);
        glColor3f(1, 1, 0);  // Yellow
    } else if (choice == 4) {
        translate(transformed, 100, 50);
        glColor3f(1, 0, 1);  // Magenta
    }

    if (choice >= 1 && choice <= 4)
        drawTriangle(transformed);

    glFlush();
}

void keyboard(unsigned char key, int x, int y) {
    if (key == '1') {
        choice = 1;
    } else if (key == '2') {
        choice = 2;
    } else if (key == '3') {
        choice = 3;
    } else if (key == '4') {
        choice = 4;
    } else {
        std::cout << "Invalid key! Press 1 (scale), 2 (rotate), 3 (reflect), 4 (translate).\n";
        return;
    }
    glutPostRedisplay();  // Update the display
}

void init() {
    glClearColor(1, 1, 1, 1);               // White background
    gluOrtho2D(-400, 400, -400, 400);       // Coordinate system
}

int main(int argc, char** argv) {
    std::cout << "Press 1 for Scaling\n";
    std::cout << "Press 2 for Rotation\n";
    std::cout << "Press 3 for Reflection (X-axis)\n";
    std::cout << "Press 4 for Translation\n";

    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
    glutInitWindowSize(600, 600);
    glutCreateWindow("2D Transformations - User Choice");
    init();
    glutDisplayFunc(display);
    glutKeyboardFunc(keyboard);
    glutMainLoop();
    return 0;
}
