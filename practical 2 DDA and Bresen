#include <GL/glut.h>
#include <cmath>
#include <algorithm>  

// Plot a single pixel
void plot(int x, int y) {
    glBegin(GL_POINTS);
    glVertex2i(x, y);
    glEnd();
}

// DDA Line Algorithm
void drawLineDDA(int x1, int y1, int x2, int y2) {
    float dx = x2 - x1;
    float dy = y2 - y1;
    int steps = (abs(dx) > abs(dy)) ? abs(dx) : abs(dy);


    float xInc = dx / steps;
    float yInc = dy / steps;

    float x = x1, y = y1;
    for (int i = 0; i <= steps; i++) {
        plot(round(x), round(y));
        x += xInc;
        y += yInc;
    }
}

// Bresenham's Line Algorithm
void drawLineBresenham(int x1, int y1, int x2, int y2) {
    int dx = std::abs(x2 - x1);
    int dy = std::abs(y2 - y1);
    int sx = (x2 > x1) ? 1 : -1;
    int sy = (y2 > y1) ? 1 : -1;
    int err = dx - dy;

    while (true) {
        plot(x1, y1);
        if (x1 == x2 && y1 == y2) break;
        int e2 = 2 * err;
        if (e2 > -dy) { err -= dy; x1 += sx; }
        if (e2 < dx)  { err += dx; y1 += sy; }
    }
}

void display() {
    glClear(GL_COLOR_BUFFER_BIT);

    glColor3f(1, 0, 0); 
    drawLineDDA(50, 50, 200, 200);

    glColor3f(0, 1, 0); 
    drawLineBresenham(50, 200, 200, 50);

    glFlush();
}

void init() {
    glClearColor(0, 0, 0, 0);     
    gluOrtho2D(0, 500, 0, 500);   
}

int main(int argc, char** argv) {
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
    glutInitWindowSize(500, 500);
    glutInitWindowPosition(100, 100);
    glutCreateWindow("DDA vs Bresenham");
    init();
    glutDisplayFunc(display);
    glutMainLoop();
    return 0;
}
