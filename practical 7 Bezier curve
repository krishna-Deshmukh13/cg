#include <GL/glut.h>
#include <iostream>

float controlPoints[4][2];  


void drawBezierCurve() {
    glColor3f(1.0, 0.0, 0.0); 
    glBegin(GL_LINE_STRIP);
    for (float t = 0.0; t <= 1.0; t += 0.01) {
        float x = (1 - t) * (1 - t) * (1 - t) * controlPoints[0][0]
                + 3 * t * (1 - t) * (1 - t) * controlPoints[1][0]
                + 3 * t * t * (1 - t) * controlPoints[2][0]
                + t * t * t * controlPoints[3][0];

        float y = (1 - t) * (1 - t) * (1 - t) * controlPoints[0][1]
                + 3 * t * (1 - t) * (1 - t) * controlPoints[1][1]
                + 3 * t * t * (1 - t) * controlPoints[2][1]
                + t * t * t * controlPoints[3][1];

        glVertex2f(x, y);
    }
    glEnd();
}


void drawControlPolygon() {
    glColor3f(0.0, 0.0, 1.0);  
    glBegin(GL_LINE_STRIP);
    for (int i = 0; i < 4; i++) {
        glVertex2f(controlPoints[i][0], controlPoints[i][1]);
    }
    glEnd();

  
    glPointSize(5);
    glColor3f(0.0, 1.0, 0.0);  
    glBegin(GL_POINTS);
    for (int i = 0; i < 4; i++) {
        glVertex2f(controlPoints[i][0], controlPoints[i][1]);
    }
    glEnd();
}

void display() {
    glClear(GL_COLOR_BUFFER_BIT);
    drawControlPolygon();
    drawBezierCurve();
    glFlush();
}

void init() {
    glClearColor(1.0, 1.0, 1.0, 1.0);  
    gluOrtho2D(0, 500, 0, 500);       
}

int main(int argc, char** argv) {
    std::cout << "Enter 4 control points (x y) between 0 and 500:\n";
    for (int i = 0; i < 4; i++) {
        std::cout << "Point " << i + 1 << ": ";
        std::cin >> controlPoints[i][0] >> controlPoints[i][1];
    }

    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
    glutInitWindowSize(500, 500);
    glutCreateWindow("Bezier Curve with 4 User Points");
    init();
    glutDisplayFunc(display);
    glutMainLoop();

    return 0;
}
